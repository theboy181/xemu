vnc-obj-y += vnc.o
vnc-obj-y += vnc-enc-zlib.o vnc-enc-hextile.o
vnc-obj-y += vnc-enc-tight.o vnc-palette.o
vnc-obj-y += vnc-enc-zrle.o
vnc-obj-y += vnc-auth-vencrypt.o
vnc-obj-$(CONFIG_VNC_SASL) += vnc-auth-sasl.o
vnc-obj-y += vnc-ws.o
vnc-obj-y += vnc-jobs.o

common-obj-y += keymaps.o console.o cursor.o qemu-pixman.o
common-obj-y += input.o input-keymap.o input-legacy.o kbd-state.o
common-obj-y += input-barrier.o
common-obj-$(CONFIG_LINUX) += input-linux.o
common-obj-$(CONFIG_SPICE) += spice-core.o spice-input.o spice-display.o
common-obj-$(CONFIG_COCOA) += cocoa.o
common-obj-$(CONFIG_VNC) += $(vnc-obj-y)
common-obj-$(call lnot,$(CONFIG_VNC)) += vnc-stubs.o
ifneq (,$(findstring m,$(CONFIG_SDL)$(CONFIG_GTK)))
common-obj-$(CONFIG_WIN32) += win32-kbd-hook.o
endif

# ui-sdl module
common-obj-$(CONFIG_SDL) += sdl.mo
sdl.mo-objs := sdl2.o sdl2-input.o sdl2-2d.o
ifeq ($(CONFIG_OPENGL),y)
sdl.mo-objs += sdl2-gl.o
endif

# Override with xemu UI
sdl.mo-objs := \
	imgui/imgui.o \
	imgui/imgui_draw.o \
	imgui/imgui_widgets.o \
	imgui/examples/imgui_impl_opengl3.o \
	imgui/examples/imgui_impl_sdl.o \
	xemu.o \
	xemu-custom-widgets.o \
	xemu-data.o \
	xemu-hud.o \
	xemu-input.o \
	xemu-monitor.o \
	xemu-net.o \
	xemu-settings.o \
	xemu-shaders.o \
	xemu-reporting.o \

ui/xemu-shaders.o: ui/shader/xemu-logo-frag.h

ifeq ($(CONFIG_WIN32),y)
IMGUI_FLAGS = -DWIN32 -DMINGW32
sdl.mo-objs := $(sdl.mo-objs) noc_file_dialog_win32.o xemu-os-utils-windows.o
endif
ifeq ($(CONFIG_LINUX),y)
IMGUI_FLAGS = -DLINUX
sdl.mo-objs := $(sdl.mo-objs) noc_file_dialog_gtk.o xemu-os-utils-linux.o
endif
ifeq ($(CONFIG_DARWIN),y)
IMGUI_FLAGS = -DAPPLE
sdl.mo-objs := $(sdl.mo-objs) noc_file_dialog_macos.o xemu-os-utils-macos.o
endif

sdl.mo-cflags := $(SDL_CFLAGS) -DIMGUI_IMPL_OPENGL_LOADER_CUSTOM="\"epoxy/gl.h\"" -Iui/imgui $(IMGUI_FLAGS)
sdl.mo-libs := $(SDL_LIBS)

# ui-gtk module
common-obj-$(CONFIG_GTK) += gtk.mo
gtk.mo-objs := gtk.o
gtk.mo-cflags := $(GTK_CFLAGS) $(VTE_CFLAGS)
gtk.mo-libs := $(GTK_LIBS) $(VTE_LIBS)
ifeq ($(CONFIG_OPENGL),y)
gtk.mo-objs += gtk-egl.o
gtk.mo-libs += $(OPENGL_LIBS)
ifeq ($(CONFIG_GTK_GL),y)
gtk.mo-objs += gtk-gl-area.o
endif
endif

ifeq ($(CONFIG_X11),y)
sdl.mo-objs += x_keymap.o
gtk.mo-objs += x_keymap.o
x_keymap.o-cflags := $(X11_CFLAGS)
x_keymap.o-libs := $(X11_LIBS)
endif

common-obj-$(CONFIG_CURSES) += curses.mo
curses.mo-objs := curses.o
curses.mo-cflags := $(CURSES_CFLAGS) $(ICONV_CFLAGS)
curses.mo-libs := $(CURSES_LIBS) $(ICONV_LIBS)

ifeq ($(CONFIG_GIO)$(CONFIG_SPICE),yy)
common-obj-$(if $(CONFIG_MODULES),m,y) += spice-app.mo
endif
spice-app.mo-objs := spice-app.o
spice-app.mo-cflags := $(GIO_CFLAGS)
spice-app.mo-libs := $(GIO_LIBS)

common-obj-$(CONFIG_OPENGL) += shader.o
common-obj-$(CONFIG_OPENGL) += console-gl.o
# common-obj-$(CONFIG_OPENGL) += egl-helpers.o
# common-obj-$(CONFIG_OPENGL) += egl-context.o
# common-obj-$(CONFIG_OPENGL_DMABUF) += egl-headless.o

shader.o-libs += $(OPENGL_LIBS)
console-gl.o-libs += $(OPENGL_LIBS)
egl-helpers.o-libs += $(OPENGL_LIBS)
egl-context.o-libs += $(OPENGL_LIBS)
egl-headless.o-libs += $(OPENGL_LIBS)
